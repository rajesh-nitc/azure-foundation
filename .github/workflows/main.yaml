# https://learn.microsoft.com/en-us/samples/azure-samples/github-terraform-oidc-ci-cd/github-terraform-oidc-ci-cd/

name: Run Terraform with OpenID Connect
on: 
  push:
    branches:
     - main
  pull_request:
    branches:
     - main
  workflow_dispatch:

permissions:
      id-token: write
      contents: read
      pull-requests: write
      
jobs: 
  job_aca_infra_analysis:
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: 05-aca-infra/envs/dev
    name: Analyse the Terraform
    environment: dev
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: "${{ secrets.INFRA_CICD_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.TENANT_ID }}"
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2.5.0

    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.3

    - name: Terraform Fmt
      run: terraform fmt -check

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -input=false
      continue-on-error: true
      
    - name: Update Pull Request
      uses: actions/github-script@v6
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

  # job_aca_infra_deploy_to_dev:
  #   if: github.event_name != 'pull_request' && contains(toJson(github.event.commits), 'Initial commit') == false
  #   defaults:
  #     run:
  #       working-directory: 05-aca-infra/envs/dev
      
  #   name: Deploy to Dev
  #   environment: dev
  #   runs-on: ubuntu-latest
  #   env:
  #     ARM_CLIENT_ID: "${{ secrets.INFRA_CICD_CLIENT_ID }}"
  #     ARM_SUBSCRIPTION_ID: "${{ secrets.SUBSCRIPTION_ID }}"
  #     ARM_TENANT_ID: "${{ secrets.TENANT_ID }}"

  #   steps:
  #   - name: Checkout Code
  #     uses: actions/checkout@v2.5.0

  #   - name: HashiCorp - Setup Terraform
  #     uses: hashicorp/setup-terraform@v2.0.3

  #   - name: Terraform Init
  #     run: terraform init

  #   - name: Terraform Apply
  #     run: terraform apply -auto-approve

  
# NOTE This is an example of how to login to the Azure CLI, this step is not needed for Terraform
#     - name: 'Az CLI login'
#       uses: azure/login@v1
#       with:
#          client-id: ${{ secrets.AZURE_CLIENT_ID }}
#          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
#          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
#     - name: 'Run Azure CLI commands'
#       run: |
#          az account show
#          az group list
          
    